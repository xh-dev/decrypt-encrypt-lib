package me.xeth.libs.encryptDecryptLib;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import com.fasterxml.jackson.databind.ObjectMapper;
import me.xethh.libs.toolkits.encryption.RsaEncryption;
import me.xethh.utils.functionalPacks.Scope;
import org.junit.Test;

import java.io.IOException;
import java.util.Base64;
import java.util.Optional;

/**
 * Unit test for simple App.
 */
public class AppTest 
{
    /**
     * Rigorous Test :-)
     */
    @Test
    public void shouldAnswerWithTrue()
    {
        assertTrue( true );
    }

    public static class A{
        private String a;

        public String getA() {
            return a;
        }

        public void setA(String a) {
            this.a = a;
        }
    }

    @Test
    public void test() throws IOException {
        String pubA = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAjPSdq63TkT5vsVIhXZiJ4EtLfN8GeXKBdVVPiSBOUv+/LwcrgyvbflDYqQZBQM9nUapbZw+CXv3nl0GD5eTB0fyegU/jC6+KtNK/9WABUAcMRqB2eSzPS34dCkE+yLDGgIROnYaN5UHXyMc4fKMUr4jSNahDjO9zpyujGzuMomEb7hBTpQ7fo1JpFLlnSxc83ZjZiZkFZaqINblhX+L37I7Wn1JsM7Do55JbDVjTUJOmIUoKRL7XOfcKQ5Ym4v/BN9efgkoF/0fiRAcIcqI4XUyIObUcMhLgzePh/wsmbh3P3i4jVMKYGopZSpeqx6LrU7FMum5QAtDN0LFnCGs7BvnlRx75e0vOPV7wCCrh9gr790HmehxOSZTaEv5+hx8jfYz031WINeh9tYro39RQFSUqP8w3yVvHY1ybnLxjJVcoXGaD1yUwc+488QiDzt+2ML5hf9f2Btc4RWzzoufW2TaaTnltIdhAhfqFmJjqyVwm+QQ3532HRNW4nefxFDa5axzquApWFTw8ZmyLwt+uQmMqSuUUzjJ0rKRbcedN8Dslw59A82Rme0O6rRSiswQGMcdR0BHm8nYboL6l1g1SBO1054AtTqyg7Qm7AZEGEalMxKZuF17EIl1EGMD1xwi6JAo2Wj1IOQQ+NN1PEGy6a7KIsxcadwIXzehZviBKhBsCAwEAAQ==";
        String priA = "MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQCM9J2rrdORPm+xUiFdmIngS0t83wZ5coF1VU+JIE5S/78vByuDK9t+UNipBkFAz2dRqltnD4Je/eeXQYPl5MHR/J6BT+MLr4q00r/1YAFQBwxGoHZ5LM9Lfh0KQT7IsMaAhE6dho3lQdfIxzh8oxSviNI1qEOM73OnK6MbO4yiYRvuEFOlDt+jUmkUuWdLFzzdmNmJmQVlqog1uWFf4vfsjtafUmwzsOjnklsNWNNQk6YhSgpEvtc59wpDlibi/8E315+CSgX/R+JEBwhyojhdTIg5tRwyEuDN4+H/CyZuHc/eLiNUwpgaillKl6rHoutTsUy6blAC0M3QsWcIazsG+eVHHvl7S849XvAIKuH2Cvv3QeZ6HE5JlNoS/n6HHyN9jPTfVYg16H21iujf1FAVJSo/zDfJW8djXJucvGMlVyhcZoPXJTBz7jzxCIPO37YwvmF/1/YG1zhFbPOi59bZNppOeW0h2ECF+oWYmOrJXCb5BDfnfYdE1bid5/EUNrlrHOq4ClYVPDxmbIvC365CYypK5RTOMnSspFtx503wOyXDn0DzZGZ7Q7qtFKKzBAYxx1HQEebydhugvqXWDVIE7XTngC1OrKDtCbsBkQYRqUzEpm4XXsQiXUQYwPXHCLokCjZaPUg5BD403U8QbLprsoizFxp3AhfN6Fm+IEqEGwIDAQABAoICAQCJEAgNe57BmlPjujhFmeFgH/dMelYCXEz0Ojt33NksrhFK+o7eIxRxNM4pNbLYAZW2/I+anKMqGX1MQGGwd4vc0+eRWIwvvceD43bTdEJyfhf6yWfKlr8P6pb0dNNHNVYgfAcx+DgcWLUqQEZ2M+IWelXl5TOiZOkyAiW9gl9TOlh9WpTraJYgay9Q/qQpiXQfCtVljk2IOZXvn87G/Z4VAiRCklQyw3EGVPOC+/+nV5twvV1U0bnZXJY3eFdh3k4VLe+mMrK4ND8Z5Tjat1FVr+i7LJg5PNAqhNAqP75jz0tlAbpLXlmnXSZMeUSQkaSBImO42TGmO0IXD5pfvl2LC1ad6AXYVECngPtlmCZer/CFTrF2rsvMjRzBEJOsCMWcJq9IZEyZRjtZBMi601tca4i9+0UOGI6MGaE0phofhE/Nn827BELPkDhojNXp6fzyZc4PCD8uSfkndEAnUB+nhW3iA/OaCkYB1iaZvtwxExgQyjMZk7nbHvXsitGDEwn4GL8UHQ2K6vLTh9nDXUFFABaeGxt3seEpmO4rGvSK0Gs02RVzE9lWVa4CeNWmGBrQZ+EQAex/hKXJZTbAGnvoNBtTRyqhB8c7w0fAcozOersuT2QxTEg/z81UfCeBbDGTE5hV1Hi4tL7H+aE4f+eollzqFCZIBs75op1BhwLF8QKCAQEA2Qpcc2qn/ZaG1MJhrwhlR+c4qpY5h+xnoCzxYGPzoxfvWhWA6u/hnPd3QJd99ZATJdWrGWy9A/U2fPQKNYPuVfSpL8bLDZucXO9UQEwa41rzonJrvY1I8F2y0AMm5P8BJXOrukbXS0lPoEGqizg4hA8rvHvK9Ir2BphzGcRkAUB6QpCjwMqk+GeKHwLQNdBUrwBIpVQaUBibS7ZHTSHcNAs1t0uDxnIx64EGHYuwP4Zxh0QcKDYnHF33w+IYZuSvPimu9qVY1MowvsKmZCemc9pReAcH86RR9x0MEYW8/odklGZm7cKQ0LxaU8+hG/R2rUDCG2jkIbEN4t3ISaO6iQKCAQEApkHuXgtUwuhOq46eHi+82lXcfFjtghtBiCTkuoGKdtxGKpE/TSQ1KKxZTxyBngBHYsMKvvPv6lPOPL0I6RylfHl5VBcapnatl6iMm66H7BVjH9AH3qhMfEDY5jSa0Do0exnrcgi+xmDd1qFN+xkzKdIvdTu7lQ0i4OCP12THrsw7SJfqY1YI7BQEGx9rwIJK6XPzkED7j4G9EP8aFljnAPxM2fdCVrNdZeoKPcVZy7jieCrBUnWg0QhRgJ1vqA7ZUnvb2Q8HFki8Uqs+iz8TMPDzCU5rnSOxuVa8XmdupGVf8Kie97ac96hyiSvvIuGBMMGnnjOPO4/tjqt6eq2QgwKCAQAjZv9BjEouoRkJJ1PLuzDaE6s4mBx2QWd9xxbwRB1/ou3V4eAPcmV4txzqmktffMrCxyGLmiMSvDLRGvV3WTfNKYVXV7PTWmic+CTkAAX6w+EtxEAywRL+sinyqDD19Wp4c2+1iMyhaSnl2BA7eUYutFLMAd1PGkObO866i0BMu/m1VeaAEg3qvujWuhzASmUlzoQLA7bvDbR3GxpySG2kx5dReK3b9tCRu5AFzb1H/2QRTljRblPe2q0JdJ3KWs8C8sWpUbs1qm1dEF8XwyfxidD0JSF06n68Mi6/xPLZCbisRC/R5IS+p5qMRTfgWXXqOL/wvKFJpZnAQbDj4iMRAoIBABCkSNfhCnr4BefmPq2G2cCBF7DatetwDv8xsjN5BAMhyWQ5ZbyzAx8vIUFp+Q93t62LGGhEwp8SBHLP+TRcSbRL9HkWVvSSrI2hsXFj5vcarPFiQWdoMT++vfdNDLILIXWxAoBHn9D7oTj6rHOV8ikdgOKbOAuTZQpdcAh/bf1xM/3wNuX6lqoK1t5gJsj+QcFceeTWnFehBOvOnS3feEABATBQL7O+AHtTEfNc7cAWoZSlsvQuEgraak4VdDe+RMKc40S23F6+qRsdSQVnKuSbObiUwPDZwdBrfi906v5Jp3DPcBobjVq84boZS7aSG/xlZgHP52Zu4biGMZxWA0ECggEAV/HFkAIGLwaE1NGz4Qjq5kUOIx7pfKj+c4Yy+C+Tk1HBxROdsvhOszUaSu84VexqCdrojBkKpehn3MyisSH1fKyJ6xq/iVheV4u+/5SJZRsoYaj7g4ZcTOmJBNg8zH5cBJC6DHAvZkVh3/5wp3F+GrZZhYsAqylobyhGgQDgJXV7rhNiKEPu+tG1FZ2Bhtgaq7AIoDmYEc9Uqop87ge8bTCa18xCBcYcN80r6FZtYfvK4B58XU4G2QoRROEHKy5QFKtfYbj6CfCJytrwHJAl0Pi01KoZXdEMBuTlZsCqez0AZs6E0rpnX8ckIppzBF1aNnmKW8kJHo59w+d1Lnxoug==";
        String pubB = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvRYM6HABJ6wxHOuxtq0QQzffkPz3F7syhRJLWMzFjUrU0ktwyc7xi92VpI2zkkLaTz2GjUaRBhxtnu1sdBSP8BzuxUmjoA2pktC8qzh8bu8Xi5GSLsKTI3xn3UkUQJeby8e084lNmgjRsHP/ZUZXYPBV9NHnVYxwIY60MmDux5NgSjIU3zBA53SJMpmqJZUrLnmwtQRrbyTq09KpEXmzViEo4S+O/jbrEN6dAk2/fLKdj6GSBGOlt0vbBXeAkL/tdQAMOpnPZQSXSJeVzMtZwDsfSlrKo4hRPCiryLC6TMpfAUW6YbabNHmsE/Y/dLmZr0DCnWOq/yarytCXi07J9vlB0hBjmCZ880ngpcCcXKeDXCdVhn6qAW7jPXvvMjPAYGVGgDmsUp8a/7uGlu7+yuRtb32xkLAU4NAgyvWBLdhyPjtVk+jCIUMIR3vPXVSAtnl31M8YuRbytuIGXWVrNbqrjrvAAMD0SEAMJ8tPkAoTTgILKh93kZZNoslZb1TAbmzL2dpRC7ZwOdQfqDaaiQXLxi4HuUJsI4nKBoUAqlVhByPqcJvYvUhSeEz/vTqu6wdtuM8XKg6u4q5bwcGkYLTh4rSAetZ6lMN8SVtE0O7VHFASFgzpK5JTY8pkPlr1asDEvViQ0G0waEGcQ550fKxZR3LYvY3dJsLRflP93vkCAwEAAQ==";
        String priB = "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";
        A a = new A();
        a.a = "hello world";
        Ava sa = Ava.of(
                Scope.of(pubA).let(it -> Base64.getDecoder().decode(it)).let(it -> RsaEncryption.getPublicKey(it)).unscoped()
                ,
                Scope.of(priA).let(it -> Base64.getDecoder().decode(it)).let(it -> RsaEncryption.getPrivateKey(it)).unscoped()
        );
        Bernice ra = Bernice.of(sa.getPublicKey());
        Ava sb = Ava.of(
                Scope.of(pubB).let(it -> Base64.getDecoder().decode(it)).let(it -> RsaEncryption.getPublicKey(it)).unscoped()
                ,
                Scope.of(priB).let(it -> Base64.getDecoder().decode(it)).let(it -> RsaEncryption.getPrivateKey(it)).unscoped()
        );
        Bernice rb = Bernice.of(sb.getPublicKey());

        Envelope d = sa.encrypt(rb, a);
        Optional<A> data = sb.decryptClass(ra, d, A.class);

        assertTrue(data.isPresent());
        assertEquals(data.get().getA(), a.getA());


    }

    @Test
    public void test1() throws IOException {
        String data = "{\"data\":\"eyJzaWduIjoiT1VrNWtaNkpvOWFrWkRkMFhham1ZUzdyOGJ6bmZHQ0ZubjY2WlhoU1NtNWpWZ0NlZ005dU42S0I0QUpJblp0eVlpdUZtMHpUWTBnSVNLeURlR0c4azhnMkh5YkFyOVFybFZvUDlhd2xOK3VUMGl5blBQZ05QRTVZUGJLcnFpM0VUenpWWExrR2xWa3BDcTNBTHpTNnZQUlVQS3pBSkN3cXNkbWRGQ2NJVTBtUnZuMTZPUkV0RVlJNWhZbHE5UExTUGtjMXl4aDN4RnY3N0s1RmN6RVdSWlNsdGhjZkRXQjhObEF5dEsrZFptNjd3dGRiVUQrSGRoTHFPK2RFbUtHK0ZmMnBYZnpNT21iTVVXcmhOdUJZaTdvT0NpYVFXMTNTdlpxUSs2RndXNjczc1h4RUZLVXVLYTRLemNkd3Axa1YrNjNkTER2aXFjNzN0RGJNNno4dUpCMEdUZEhqTnE0aWlyZERUa1dsaDQzYkRnZlhFSVNNMlNSQU1sTFU4eGc5eXdtbEdLSU8ybmtMNkcyb24wR2x0WjBtL0hYcVpGditiMHM4NzB5NW85Z0dqeEZnRFF1NVV4WFNpcFZmcmNVZ1QzcnFHNkNBbEZleCtDSnVkcUtESmE4MUxZWEs0NUE0aDRkU0czN3JobHlLalZIZWQwZU8zUFpKcGxCNXlsUXFVTWtGeWw5TjN3b2lIOVpsOU9Lek5zM05IcDQxNURpNGVXaHJhcWRUVG51RURmZGlVeHNqMEFOZElNVllkc0gwc0oxZ2FIdVdEVlpHeGhIUkFVckxxTHc3blcydHRHV2xUeXpUWWc2SWhKYm9iNlZoK2JMVTFSL1d3MGQ1Z2ttWnBOdnphOHZuSlhPdlNZb2VrYnlyQ2RtUWlXcEJCbzNxSkw0YWw3Y2EyTTA9IiwiZGF0YSI6Ik9EdHFid0g2RFRaVXY1aFpZS0QrWWc9PSIsImtleSI6IlVDTnRTQ2NseTgxV0hDNEd4MGN4QjNERmN0Q0pUWVlDY1ZCWVdHSDFDbG16QXdPWVFIU2hXaU1VZDlwWkdXY09rcm00TXNqTlYzS0liSDVhQnN6QmgxMEN6c2hDcnpQam5zMkkyZVpvcXFUUHVMTk1YSk5xekVZNDNVK21uaHpwSHV0SjJ4aUx4c1FvaS93RFI4VkdhcUpXTFNoRVV0VHJQaWx3SkRRUHJpUDBwNEVLL3J1S3JXT0xpV2ZGODhpZlpwb21jKzdJRERob3Z3andJcWFBTkh0dmJJcGttTnNXQnJJbGVsVE1ZbUtscGFXRmZ5M3VULzB4TVp0YVJXWURqbThid2RnVFNTZWJNeWhkQk9JRzNscWlkTU96cEZGUEs0cDVzTVErSnBjd0ZqOFhvUnp0RlZhZWV3WlhET2dzdldZQzBSaE5pRFBwYnJ3YnJ4WkFIbjcvbkpTaWhFcytFUVlnQ3pXSXVFZEVVUjlxbVJQQkQ5NmpMZTR0QW9leVBDdGJ1akNvNTZpU2lPeUJONU80Q21YNWswcmR5NWcvL1FuYk0rbldXYVlzMDVNNkw5dkFqYkYrRFJ6bHI0WkFWNk4wMzVxdi81Zldvdk9GelpIMlBlQ1ZGcmtsWUpDZUMwRy9rdzlIN2o5TE1JazFsajRDTXJ0UUtPYm0xd1lGN0M3QytQM09nSFFXaGYvdjZZVFNOUUZyaUxML0MycHhEbU40Y3dzUE1EWi9UeStYemcxU3BXSjBMb2hiMktCTnlwck1PTGJxcGRDemtmbU9MLy9Ia0hjS1czY2ljWDIrWFcxS0pUY285dndPVWtxZ2tyM1BscExnYUM0MGZNVWhRcFVjYkRJZGJuNU5MUWJiRzZnS0pMbXFldldzWk1lV1p0bTl6Ym1VTHAwPSIsIml2IjoiWEtsOWF6NmRPQkEwQWVOYlRnZEtxckFvYTZXdlBzd0VENW94ekwxdURMc0hHSjh5eEtoSW9kRU44bllXYlplOW8zbHZ6TWdSVnd4eXllY2hjM2pCeVcwNjhiOFlkSkVUU1ZHdVdMUU9Jejh6dThPajY5YkZMR2NnSEdrOVJyRHpPZkFsbWIzeXI0QXBQZW9qR3JDTHhGcGVzaTBVK3Z4VWN2aXJlN2VZT3lrUzFmcmtRQlo3YTA3YVpFRFBqVkFtVjN5Qk5WR0dKbmxVS2lPNlgyWHA3UW1UUTJybHpQS3hUekRaOWFlS0YxYUZHSnBuQlViV3d4UCsydmJoNCtnL09VR09DdnV4TVg0c3ArbzRodmFhcHdNYkJDOVRBTkdwS1Z4TzFUMHhYNXhpV3VsK2FienBBMG9ZZnlKRGJhNG9jMHJtU082aDN6UXY2Sng0R1NhVklZK3JpZUVsc1FGalhScjhjbFcvazVKUnRZVzM3SWRuSjNSN0R6bk84L0hTSUsrZG5Rb2QvbzN6VU96a3BINXdHOTlZNEdITVQ3QjMzVGZ6NzFsakJsSmdjOGp0cldrNGN0Z3VhbFhPb3dxMHUrd1kxeVdwaktHcmRwZGhPZUx0Z1lMeHRucVNuaVFEUWR3eFo3eU5KQjIwZnc0clZaekpVQXpySzhGcHlBUWExVkg0b3hZRVZSOEhqSFdwaDRwMkVQMnZWYUpFd2t6Ui85czFETlJ5TlRtZlcveUNwTGZyeS9FcCtMQ3dtS2pyM291ODlJdmo1b0Fsb0s3UVBIZSs4L2pzU3BZVjg5TE1zQ3F2Y2JYQThUaVFQWHNsMmsxRkxpYWl3Zm5MYU12bWVLb3h0S1lmWXBWTm16U2Y2ei91bGsxY3NYWFZ3blo3WUV3ZDhmNmlGZjQ9In0=\"}";
        String priA = "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";
        String pubA = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAjqEsfA00tG5xhj98X2kC63UfWx8fc6pRm6S+ei64eQ7klCQGRxtSrJCauCOAmkUnFlnvjAbshAqCpzaued0bdgs727o6b1kIxATA+W3M+IULxgWyFd/Cr2hzGSv5m51SQIq7JJuWQbXd0FQDYptnIOAvVCR9KW4gUvPi3jIlvwQn31qOdVAOArRE3aYjcb40M4fcY31KJnJf9TN8s/Eh16oLf+JBo/qOndef+yRsn1KR/k2B7xkPYtcZQM9ll8mZjxHqXxjySb9EEabGOLMkPmCUOIv56lsCQLj5/u1HiI03hLUJ63NdFR0r5BwJrvb9o2H/684mCoE9RIWgjvQZxtVO0WyhOiuaysqqpx+JNJr9AXPSLE5Dpm3ZSU91liIpkuxPdqmR3pjJINWJfY+++5ooyfITJzeYyAJHGFluzvePnLGnKTsK1x/NzF4JKMhThTDntJKzm6r54C7fItkrtJEuPBK2pJAQ5gbQ2/mjyatlRH/R/qym0LP2nDeds/MIhy27op2DdXK9VrGTOQ+YXiETc88iFayRnpg3/LfIFB/870Yq6jMBkaSKKJtDGIcSdil8IJZX3iLz14eE46X+yG5O3m8jP2TaQMDoA4RsN+f0bRrzCxwUMs4bVtDm7UwGzSfbTmlNYO9fCSpWBH8P454Cl0Ya848h7Mxg/qFevSECAwEAAQ==";
        String priB = "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";
        String pubB = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgmxp+4nmWqUHPilmfzpQrF12JSdIup6bLtQRw/9oE77ou0GfBz2IyG36gaZ1W/Q54Iwp4Hqh8NWTAIVwQTWsl/8Kbr7xG0Sy306k+7JOXP8iHWAkLmRiO1JhWQyz0/dH1t2YXDM+gQKYFOMivdBNgSK5rFsM4DoDGUexllWeh6xP+0hxbUBjTSbybDxJwtYjWszSjfZJJVy8OhhhnSY36MpgzRtQEq/+/QfAXNfb8IQoDQ+NzItOqPp2ydDtxf8N1lhHr/rvzcerJFXO20rJCXLumx4DrMubigCAiyxa+Bxueo3AqF209q5V8vzRn/ThHFnXLCdGIjX2t9rz1p5engOGHkg6/D0XInYlbUDvasxQwocZyLbwIHZTJMQhnwUd0ylP5Kw3qrCyjbh1FWi7LrWPnpRVaaOfH3Y56n+LRhUZZzTn70W1zi9VNtcj4akD1ThsDvf15wdFtqIF+1dfGWijs8ze4xy16ypt+FxDg4VOTAzDxs59NbNpOSKBcDPXecWCfHjg/0RmfYsnN4yOhWfVNs3wxh9hDx5KAb6DfCEtVhoJEt476dcAqPTX8a+4jwABauIc3cA7cddxxTjuzG2AmoHJl+fzFjYqgYpBermaUA3scJoupv/1/E4XvMpQLvettyFRKeY5ho7X2csyNDtT1c0BPxaZGwKDp+KkjS8CAwEAAQ==";

        Ava sa = Ava.of(
                Scope.of(pubA).let(it -> Base64.getDecoder().decode(it)).let(RsaEncryption::getPublicKey).unscoped()
                ,
                Scope.of(priA).let(it -> Base64.getDecoder().decode(it)).let(RsaEncryption::getPrivateKey).unscoped()
        );
        Ava sb = Ava.of(
                Scope.of(pubB).let(it -> Base64.getDecoder().decode(it)).let(RsaEncryption::getPublicKey).unscoped()
                ,
                Scope.of(priB).let(it -> Base64.getDecoder().decode(it)).let(RsaEncryption::getPrivateKey).unscoped()
        );
        Bernice ra = Bernice.of(sb.getPublicKey());
        Bernice rb = Bernice.of(sa.getPublicKey());

        Envelope envelope = Ava.getMapper().readValue(data, Envelope.class);
        Optional<String> rs = sb.decryptClass(rb, envelope, String.class);
        assertTrue(rs.isPresent());
        assertEquals("x",rs.get());

    }
}
